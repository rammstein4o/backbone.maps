/*!
 * backbone.maps
 * A Backbone JS extension for interacting with javascript maps APIs
 * Copyright (c) 2015-2016 Radoslav Salov
 * Distributed under MIT license
 * Copyright for portions of the project are held by:
 * Edan Schwartz (c) 2012-2015 ( https://github.com/eschwartz/backbone.googlemaps )
 */
!function(a,b){if("function"==typeof define&&define.amd)define(["backbone","underscore","jquery","leaflet","d3"],b);else if("object"==typeof exports){var c,d=require("underscore");try{c=require("jquery")}catch(e){}var f=require("backbone"),g=require("leaflet"),h=require("d3");module.exports=b(f,d,c,g,h)}else b(a.Backbone,a._,a.jQuery||a.Zepto||a.ender,a.L,a.d3)}(this,function(a,b,c,d,e){"use strict";var f={};return f.Location=a.Model.extend({constructor:function(){b.bindAll(this,"select","deselect","toggleSelect","getLatLng","getLatlng"),this.defaults=b.extend({},{lat:0,lng:0,selected:!1,title:"",options:{}},this.defaults),a.Model.prototype.constructor.apply(this,arguments),this.on("change:selected",function(a,b){var c=b?"selected":"deselected";this.trigger(c,this)},this)},select:function(){this.set("selected",!0)},deselect:function(){this.set("selected",!1)},toggleSelect:function(){this.set("selected",!this.get("selected"))},getLatlng:function(){return this.getLatLng()},getLatLng:function(){return d.latLng(this.get("lat"),this.get("lng"))}}),f.LocationCollection=a.Collection.extend({constructor:function(c,d){var e=b.defaults({},d,{model:f.Location});e.model=e.model||f.Location,a.Collection.prototype.constructor.call(this,c,e),this.on("change:selected",function(a,b){b&&this.each(function(b){a.cid!==b.cid&&b.deselect()})},this)}}),f.OverlayView=a.View.extend({constructor:function(c){if(b.bindAll(this,"render","close"),this.mapEvents=this.mapEvents||{},this.overlayOptions=this.overlayOptions||{},a.View.prototype.constructor.apply(this,arguments),this.options=c,!d)throw new Error("Leaflet API is not loaded.");if(!this.options.map&&!this.map)throw new Error("A map must be specified.");this.gOverlay=this.map=this.options.map||this.map,b.extend(this.overlayOptions,this.options.overlayOptions)},bindMapEvents:function(a,c){var d=c||this;a=a||this.mapEvents,b.each(a,function(a,b){var c=this._getHandlerFromReference(a);this._addMapsListener(b,c,d)},this)},_getHandlerFromReference:function(a){var c=b.isString(a)?this[a]:a;if(!b.isFunction(c))throw new Error("Unable to bind map event. "+a+" is not a valid event handler method");return c},_addMapsListener:function(a,c,d){d&&(c=b.bind(c,d))},render:function(){return this.trigger("before:render"),this.beforeRender&&this.beforeRender(),this.bindMapEvents(),this.trigger("render"),this.onRender&&this.onRender(),this},close:function(){this.trigger("before:close"),this.beforeClose&&this.beforeClose(),this.gOverlay.close&&this.gOverlay.close(),this.map.removeLayer(this.gOverlay),this.gOverlay=null,this.trigger("close"),this.onClose&&this.onClose()}}),f.InfoWindow=f.OverlayView.extend({constructor:function(a){if(f.OverlayView.prototype.constructor.apply(this,arguments),b.bindAll(this,"render","close"),!this.options.marker&&!this.marker)throw new Error("A marker must be specified for InfoWindow view.");this.marker=this.options.marker||this.marker,this.template=this.template||this.options.template},onRender:function(){f.OverlayView.prototype.onRender&&f.OverlayView.prototype.onRender.apply(this,arguments);var a;if("function"==typeof this.template)a=this.template;else if("string"==typeof this.template){var e="<h2><%=title %></h2>";this.template&&(e=c(this.template).length?c(this.template).html():this.template),a=b.template(e)}"function"==typeof a&&(this.$el.html(a(this.model.toJSON())),this.gOverlay=d.popup().setContent(this.$el.html()).setLatLng(this.marker.getLatLng()).addTo(this.map),this.marker.bindPopup(this.gOverlay).openPopup())}}),f.MarkerView=f.OverlayView.extend({constructor:function(a){if(f.OverlayView.prototype.constructor.apply(this,arguments),b.bindAll(this,"render","close","openDetail","closeDetail","toggleSelect"),this.infoWindow=this.infoWindow||this.options.infoWindow||f.InfoWindow,!this.model)throw new Error("A model must be specified for a MarkerView");this.gOverlay=d.marker(this.model.getLatLng(),b.extend({title:this.model.title,opacity:0},this.overlayOptions)).addTo(this.map).on("click",this.toggleSelect),this.model.on("change:selected",function(a,b){b?this.openDetail():this.closeDetail()},this),this.model.on("change:lat change:lng",this.refreshOverlay,this),this.bindMapEvents({position_changed:"updateModelPosition"})},refreshOverlay:function(){this.model.getLatLng().equals(this.gOverlay.getLatLng())||this.gOverlay.setLatLng(this.model.getLatLng()).update()},updateModelPosition:function(){var a=this.gOverlay.getLatLng();this.model.getLatLng().equals(a)||this.model.set({lat:a.lat,lng:a.lng})},toggleSelect:function(){this.model.toggleSelect()},onRender:function(){f.OverlayView.prototype.onRender&&f.OverlayView.prototype.onRender.apply(this,arguments),this.gOverlay.setOpacity(1)},beforeClose:function(){f.OverlayView.prototype.beforeClose&&f.OverlayView.prototype.beforeClose.apply(this,arguments),this.closeDetail()},onClose:function(){f.OverlayView.prototype.onClose&&f.OverlayView.prototype.onClose.apply(this,arguments),this.model.off()},openDetail:function(){this.closeDetail(),this.detailView=new this.infoWindow({model:this.model,map:this.map,marker:this.gOverlay}),this.detailView.render()},closeDetail:function(){this.detailView&&(this.detailView.close(),this.detailView=null)}}),f.MarkerCollectionView=a.View.extend({constructor:function(c){if(this.markerView=this.markerView||f.MarkerView,this.markerViewChildren=this.markerViewChildren||{},a.View.prototype.constructor.apply(this,arguments),this.options=c,b.bindAll(this,"render","closeChildren","closeChild","addChild","refresh","close"),!this.options.map&&!this.map)throw new Error("A map must be specified on MarkerCollectionView instantiation");this.map=this.map||this.options.map,this.collection.on("reset",this.refresh,this),this.collection.on("add",this.addChild,this),this.collection.on("remove",this.closeChild,this)},render:function(a){return a=a||this.collection,this.trigger("before:render"),this.beforeRender&&this.beforeRender(),a.each(this.addChild),this.trigger("render"),this.onRender&&this.onRender(),this},closeChildren:function(){for(var a in this.markerViewChildren)this.closeChild(this.markerViewChildren[a])},closeChild:function(a){var b=a instanceof f.Location?this.markerViewChildren[a.cid]:a;b.close(),delete this.markerViewChildren[b.model.cid]},addChild:function(a){var c={};this.options.markerOptions?c.overlayOptions=this.options.markerOptions:a.get("options")&&(c.overlayOptions=a.get("options")),c=b.extend(c,{model:a,map:this.map});var d=new this.markerView(c);this.markerViewChildren[a.cid]=d.render()},refresh:function(){this.closeChildren(),this.render()},close:function(){this.closeChildren(),this.collection.off()}}),f.OverlayViewD3=f.OverlayView.extend({constructor:function(a){f.OverlayView.prototype.constructor.apply(this,arguments),this.gLayer=e.select(this.map.getPanes().overlayPane).append("div").attr("class","stations"),this.markers={}},addMarker:function(a){a=a instanceof f.Location?a:new f.Location(a),this.markers[a.cid]=a},onRender:function(){function a(a){return a=c.map.latLngToLayerPoint(a.value.getLatLng()),e.select(this).style("left",a.x-d+"px").style("top",a.y-d+"px")}function b(){var a=10==e.select(this).attr("r")?5:10;e.select(this).transition().duration(100).attr("r",a)}f.OverlayView.prototype.onRender&&f.OverlayView.prototype.onRender.apply(this,arguments);var c=this,d=10,g=c.gLayer.selectAll("svg").data(e.entries(c.markers)).each(a).enter().append("svg:svg").each(a).attr("class","marker");g.append("svg:circle").attr("r",5).attr("cx",d).attr("cy",d).on("click",b)}}),a.Maps=f,f});