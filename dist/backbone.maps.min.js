/*!
 * backbone.maps
 * A Backbone JS extension for interacting with javascript maps APIs
 * Copyright (c) 2015 Radoslav Salov
 * Distributed under MIT license
 * Copyright for portions of the project are held by:
 * Edan Schwartz (c) 2012-2015 ( https://github.com/eschwartz/backbone.googlemaps )
 */
!function(a,b){if("function"==typeof define&&define.amd)define(["backbone","underscore","jquery"],b);else if("object"==typeof exports){var c,d=require("underscore");try{c=require("jquery")}catch(e){}var f=require("backbone");module.exports=b(f,d,c)}else b(a.Backbone,a._,a.jQuery||a.Zepto||a.ender)}(this,function(a,b,c){"use strict";var d={};return d.Location=a.Model.extend({constructor:function(){b.bindAll(this,"select","deselect","toggleSelect","getLatLng","getLatlng"),this.defaults=b.extend({},{lat:0,lng:0,selected:!1,title:"",options:{}},this.defaults),a.Model.prototype.constructor.apply(this,arguments),this.on("change:selected",function(a,b){var c=b?"selected":"deselected";this.trigger(c,this)},this)},select:function(){this.set("selected",!0)},deselect:function(){this.set("selected",!1)},toggleSelect:function(){this.set("selected",!this.get("selected"))},getLatlng:function(){return this.getLatLng()},getLatLng:function(){return new google.maps.LatLng(this.get("lat"),this.get("lng"))}}),d.LocationCollection=a.Collection.extend({constructor:function(c,e){var f=b.defaults({},e,{model:d.Location});f.model=f.model||d.Location,a.Collection.prototype.constructor.call(this,c,f),this.on("change:selected",function(a,b){b&&this.each(function(b){a.cid!==b.cid&&b.deselect()})},this)}}),d.MapView=a.View.extend({constructor:function(c){if(b.bindAll(this,"render","close"),this.mapEvents=this.mapEvents||{},this.overlayOptions=this.overlayOptions||{},a.View.prototype.constructor.apply(this,arguments),this.options=c,!google||!google.maps)throw new Error("Google maps API is not loaded.");if(!this.options.map&&!this.map)throw new Error("A map must be specified.");this.gOverlay=this.map=this.options.map||this.map,b.extend(this.overlayOptions,this.options.overlayOptions)},bindMapEvents:function(a,c){var d=c||this;a=a||this.mapEvents,b.each(a,function(a,b){var c=this._getHandlerFromReference(a);this._addGoogleMapsListener(b,c,d)},this)},_getHandlerFromReference:function(a){var c=b.isString(a)?this[a]:a;if(!b.isFunction(c))throw new Error("Unable to bind map event. "+a+" is not a valid event handler method");return c},_addGoogleMapsListener:function(a,c,d){d&&(c=b.bind(c,d)),google.maps.event.addListener(this.gOverlay,a,c)},render:function(){return this.trigger("before:render"),this.beforeRender&&this.beforeRender(),this.bindMapEvents(),this.trigger("render"),this.onRender&&this.onRender(),this},close:function(){this.trigger("before:close"),this.beforeClose&&this.beforeClose(),this.gOverlay.close&&this.gOverlay.close(),google.maps.event.clearInstanceListeners(this.gOverlay),this.gOverlay.setMap&&this.gOverlay.setMap(null),this.gOverlay=null,this.trigger("close"),this.onClose&&this.onClose()}}),d.InfoWindow=d.MapView.extend({constructor:function(a){if(d.MapView.prototype.constructor.apply(this,arguments),b.bindAll(this,"render","close"),!this.options.marker&&!this.marker)throw new Error("A marker must be specified for InfoWindow view.");this.marker=this.options.marker||this.marker,this.template=this.template||this.options.template},onRender:function(){d.MapView.prototype.onRender&&d.MapView.prototype.onRender.apply(this,arguments);var a;if("function"==typeof this.template)a=this.template;else if("string"==typeof this.template){var e="<h2><%=title %></h2>";this.template&&(e=c(this.template).length?c(this.template).html():this.template),a=b.template(e)}this.$el.html(a(this.model.toJSON())),this.gOverlay=new google.maps.InfoWindow(b.extend({content:this.$el[0]},this.overlayOptions)),this.gOverlay.open(this.map,this.marker)}}),d.MarkerView=d.MapView.extend({constructor:function(a){if(d.MapView.prototype.constructor.apply(this,arguments),b.bindAll(this,"render","close","openDetail","closeDetail","toggleSelect"),this.infoWindow=this.infoWindow||this.options.infoWindow,!this.model)throw new Error("A model must be specified for a MarkerView");this.gOverlay=new google.maps.Marker(b.extend({position:this.model.getLatLng(),map:this.map,title:this.model.title,animation:google.maps.Animation.DROP,visible:!1},this.overlayOptions)),b.extend(this.mapEvents,{click:"toggleSelect"}),this.model.on("change:selected",function(a,b){b?this.openDetail():this.closeDetail()},this),this.model.on("change:lat change:lng",this.refreshOverlay,this),this.bindMapEvents({position_changed:"updateModelPosition"})},refreshOverlay:function(){this.model.getLatLng().equals(this.gOverlay.getPosition())||this.gOverlay.setOptions({position:this.model.getLatLng()})},updateModelPosition:function(){var a=this.gOverlay.getPosition();this.model.getLatLng().equals(a)||this.model.set({lat:a.lat(),lng:a.lng()})},toggleSelect:function(){this.model.toggleSelect()},onRender:function(){d.MapView.prototype.onRender&&d.MapView.prototype.onRender.apply(this,arguments),this.gOverlay.setVisible(!0)},beforeClose:function(){d.MapView.prototype.beforeClose&&d.MapView.prototype.beforeClose.apply(this,arguments),this.closeDetail()},onClose:function(){d.MapView.prototype.onClose&&d.MapView.prototype.onClose.apply(this,arguments),this.model.off()},openDetail:function(){this.detailView=new this.infoWindow({model:this.model,map:this.map,marker:this.gOverlay}),this.detailView.render()},closeDetail:function(){this.detailView&&(this.detailView.close(),this.detailView=null)}}),d.MarkerCollectionView=a.View.extend({constructor:function(c){if(this.markerView=this.markerView||d.MarkerView,this.markerViewChildren=this.markerViewChildren||{},a.View.prototype.constructor.apply(this,arguments),this.options=c,b.bindAll(this,"render","closeChildren","closeChild","addChild","refresh","close"),!this.options.map&&!this.map)throw new Error("A map must be specified on MarkerCollectionView instantiation");this.map=this.map||this.options.map,this.collection.on("reset",this.refresh,this),this.collection.on("add",this.addChild,this),this.collection.on("remove",this.closeChild,this)},render:function(a){return a=a||this.collection,this.trigger("before:render"),this.beforeRender&&this.beforeRender(),a.each(this.addChild),this.trigger("render"),this.onRender&&this.onRender(),this},closeChildren:function(){for(var a in this.markerViewChildren)this.closeChild(this.markerViewChildren[a])},closeChild:function(a){var b=a instanceof d.Location?this.markerViewChildren[a.cid]:a;b.close(),delete this.markerViewChildren[b.model.cid]},addChild:function(a){var c={};this.options.markerOptions?c.overlayOptions=this.options.markerOptions:a.get("options")&&(c.overlayOptions=a.get("options")),c=b.extend(c,{model:a,map:this.map});var d=new this.markerView(c);this.markerViewChildren[a.cid]=d.render()},refresh:function(){this.closeChildren(),this.render()},close:function(){this.closeChildren(),this.collection.off()}}),a.GoogleMaps=d,d});